// Generated by gencpp from file custom_msg/DisparityParam.msg
// DO NOT EDIT!

#ifndef CUSTOM_MSG_MESSAGE_OBDISPARITYPARAM_H
#define CUSTOM_MSG_MESSAGE_OBDISPARITYPARAM_H

#include <string>
#include <vector>
#include <map>
#include <array>
#include <memory>
#include <cstring>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace custom_msg {

template <class ContainerAllocator> struct OBDisparityParam_ {
    typedef OBDisparityParam_<ContainerAllocator> Type;

    OBDisparityParam_()
        : header(),
          zpd(0.0),
          zpps(0.0),
          baseline(0.0f),
          fx(0.0),
          bitSize(0),
          unit(0.0f),
          minDisparity(0.0f),
          packMode(0),
          dispOffset(0.0f),
          invalidDisp(0),
          dispIntPlace(0),
          isDualCamera(0) {}

    OBDisparityParam_(const ContainerAllocator &_alloc)
        : header(_alloc),
          zpd(_alloc),
          zpps(_alloc),
          baseline(_alloc),
          fx(_alloc),
          bitSize(_alloc),
          unit(_alloc),
          minDisparity(_alloc),
          packMode(_alloc),
          dispOffset(_alloc),
          invalidDisp(_alloc),
          dispIntPlace(_alloc),
          isDualCamera(_alloc) {
        (void)_alloc;
    }

    typedef ::std_msgs::Header_<ContainerAllocator> _header_type;
    _header_type                                    header;

    typedef double _zpd;
    _zpd           zpd;

    typedef double _zpps;
    _zpps          zpps;

    typedef float _baseline;
    _baseline     baseline;

    typedef double _fx;
    _fx            fx;

    typedef uint8_t _bitSize;
    _bitSize        bitSize;

    typedef float _unit;
    _unit         unit;

    typedef float _minDisparity;
    _minDisparity minDisparity;

    typedef uint8_t _packMode;
    _packMode       packMode;

    typedef float _dispOffset;
    _dispOffset   dispOffset;

    typedef int32_t _invalidDisp;
    _invalidDisp    invalidDisp;

    typedef int32_t _dispIntPlace;
    _dispIntPlace   dispIntPlace;

    typedef uint8_t _isDualCamera;
    _isDualCamera   isDualCamera;

    typedef std::shared_ptr<::custom_msg::OBDisparityParam_<ContainerAllocator>>       Ptr;
    typedef std::shared_ptr<::custom_msg::OBDisparityParam_<ContainerAllocator> const> ConstPtr;
};

typedef ::custom_msg::OBDisparityParam_<std::allocator<void>> DisparityParam;
typedef std::shared_ptr<::custom_msg::DisparityParam>         DisparityParamPtr;
typedef std::shared_ptr<::custom_msg::DisparityParam const>   DisparityParamConstPtr;

template <typename ContainerAllocator> std::ostream &operator<<(std::ostream &s, const ::custom_msg::OBDisparityParam_<ContainerAllocator> &v) {
    orbbecRosbag::message_operations::Printer<::custom_msg::OBDisparityParam_<ContainerAllocator>>::stream(s, "", v);
    return s;
}

template <typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::OBDisparityParam_<ContainerAllocator1> &lhs, const ::custom_msg::OBDisparityParam_<ContainerAllocator2> &rhs) {
    return lhs.header == rhs.header && lhs.zpd == rhs.zpd && lhs.zpps == rhs.zpps && lhs.baseline == rhs.baseline && lhs.fx == rhs.fx
           && lhs.bitSize == rhs.bitSize && lhs.unit == rhs.unit && lhs.minDisparity == rhs.minDisparity && lhs.packMode == rhs.packMode
           && lhs.dispOffset == rhs.dispOffset && lhs.invalidDisp == rhs.invalidDisp && lhs.dispIntPlace == rhs.dispIntPlace
           && lhs.isDualCamera == rhs.isDualCamera;
}

template <typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::OBDisparityParam_<ContainerAllocator1> &lhs, const ::custom_msg::OBDisparityParam_<ContainerAllocator2> &rhs) {
    return !(lhs == rhs);
}

}  // namespace custom_msg

namespace orbbecRosbag {
namespace message_traits {

template <class ContainerAllocator> struct IsFixedSize<::custom_msg::OBDisparityParam_<ContainerAllocator>> : public FalseType {};

template <class ContainerAllocator> struct IsFixedSize<::custom_msg::OBDisparityParam_<ContainerAllocator> const> : public FalseType {};

template <class ContainerAllocator> struct IsMessage<::custom_msg::OBDisparityParam_<ContainerAllocator>> : public TrueType {};

template <class ContainerAllocator> struct IsMessage<::custom_msg::OBDisparityParam_<ContainerAllocator> const> : public TrueType {};

template <class ContainerAllocator> struct HasHeader<::custom_msg::OBDisparityParam_<ContainerAllocator>> : public TrueType {};

template <class ContainerAllocator> struct HasHeader<::custom_msg::OBDisparityParam_<ContainerAllocator> const> : public TrueType {};

template <class ContainerAllocator> struct MD5Sum<::custom_msg::OBDisparityParam_<ContainerAllocator>> {
    static const char *value() {
        return "abcdef0123456789abcdef0123456789";
    }
    static const char *value(const ::custom_msg::OBDisparityParam_<ContainerAllocator> &) {
        return value();
    }
};

template <class ContainerAllocator> struct DataType<::custom_msg::OBDisparityParam_<ContainerAllocator>> {
    static const char *value() {
        return "custom_msg/OBDisparityParam";
    }
    static const char *value(const ::custom_msg::OBDisparityParam_<ContainerAllocator> &) {
        return value();
    }
};

template <class ContainerAllocator> struct Definition<::custom_msg::OBDisparityParam_<ContainerAllocator>> {
    static const char *value() {
        return "std_msgs/Header header\n"
               "float64 zpd\n"
               "float64 zpps\n"
               "float32 baseline\n"
               "float64 fx\n"
               "uint8 bitSize\n"
               "float32 unit\n"
               "float32 minDisparity\n"
               "uint8 packMode\n"
               "float32 dispOffset\n"
               "int32 invalidDisp\n"
               "int32 dispIntPlace\n"
               "uint8 isDualCamera\n";
    }
    static const char *value(const ::custom_msg::OBDisparityParam_<ContainerAllocator> &) {
        return value();
    }
};

}  // namespace message_traits
}  // namespace orbbecRosbag

namespace orbbecRosbag {
namespace serialization {

template <class ContainerAllocator> struct Serializer<::custom_msg::OBDisparityParam_<ContainerAllocator>> {
    template <typename Stream, typename T> inline static void allInOne(Stream &stream, T m) {
        stream.next(m.header);
        stream.next(m.zpd);
        stream.next(m.zpps);
        stream.next(m.baseline);
        stream.next(m.fx);
        stream.next(m.bitSize);
        stream.next(m.unit);
        stream.next(m.minDisparity);
        stream.next(m.packMode);
        stream.next(m.dispOffset);
        stream.next(m.invalidDisp);
        stream.next(m.dispIntPlace);
        stream.next(m.isDualCamera);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
};

}  // namespace serialization
}  // namespace orbbecRosbag

namespace orbbecRosbag {
namespace message_operations {

template <class ContainerAllocator> struct Printer<::custom_msg::OBDisparityParam_<ContainerAllocator>> {
    template <typename Stream> static void stream(Stream &s, const std::string &indent, const ::custom_msg::OBDisparityParam_<ContainerAllocator> &v) {
        s << indent << "header: " << std::endl;
        Printer<::std_msgs::Header_<ContainerAllocator>>::stream(s, indent + "  ", v.header);
        s << indent << "zpd: " << static_cast<double>(v.zpd) << std::endl;
        s << indent << "zpps: " << static_cast<double>(v.zpps) << std::endl;
        s << indent << "baseline: " << static_cast<float>(v.baseline) << std::endl;
        s << indent << "fx: " << static_cast<double>(v.fx) << std::endl;
        s << indent << "bitSize: " << static_cast<unsigned char>(v.bitSize) << std::endl;
        s << indent << "unit: " << static_cast<float>(v.unit) << std::endl;
        s << indent << "minDisparity: " << static_cast<float>(v.minDisparity) << std::endl;
        s << indent << "packMode: " << static_cast<unsigned char>(v.packMode) << std::endl;
        s << indent << "dispOffset: " << static_cast<float>(v.dispOffset) << std::endl;
        s << indent << "invalidDisp: " << static_cast<unsigned int>(v.invalidDisp) << std::endl;
        s << indent << "dispIntPlace: " << static_cast<unsigned int>(v.dispIntPlace) << std::endl;
        s << indent << "isDualCamera: " << static_cast<unsigned char>(v.isDualCamera) << std::endl;
    }
};

}  // namespace message_operations
}  // namespace orbbecRosbag

#endif  // CUSTOM_MSG_MESSAGE_OBDISPARITYPARAM_H
